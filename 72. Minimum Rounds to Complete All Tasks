/*
Problem: Minimum Rounds to Complete All Tasks
Question: You are given a 0-indexed integer array tasks, where tasks[i] represents the difficulty level of a task. In each round, you can complete either 2 or 3 tasks of the same difficulty level.
Return the minimum rounds required to complete all the tasks, or -1 if it is not possible to complete all the tasks.

Example 1:
Input: tasks = [2,2,3,3,2,4,4,4,4,4]
Output: 4

Example 2:
Input: tasks = [2,3,3]
Output: -1

Constraints:
1 <= tasks.length <= 105
1 <= tasks[i] <= 109


CODE:  */

class Solution {
    public int minimumRounds(int[] tasks) {
        Arrays.sort(tasks);
        int r=0, c=0;
        for(int i=0;i<tasks.length;i++)
        {
            c++;
            if(i==tasks.length-1 ||tasks[i]!=tasks[i+1])
            {
                if(c==1)
                    return -1;
                r=r+c/3;
                if(c%3!=0)
                    r++;
                c=0;
            }
        }
        return r;
    }
}
