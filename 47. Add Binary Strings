/*
Problem: Add Binary Strings(GFG)
Question:
Given two binary strings A and B consisting of only 0s and 1s. Find the resultant string after adding the two Binary Strings.
Note: The input strings may contain leading zeros but the output string should not have any leading zeros.

Example 1:
Input: A = "1101", B = "111" 
Output: 10100 
Explanation: 
1101
+111 
10100

Example 2:

Input: 
A = "10", B = "01"
Output: 11
Explanation: 
  10
+ 01
  11
  Your Task:
You don't need to read input or print anything. Your task is to complete the function addBinary() which takes 2 binary string A and B and returns a binary string denoting the addition of both the strings.


Expected Time Complexity: O(max(|A|, |B|)).
Expected Auxiliary Space: O(max(|A|, |B|)) (for output string).


Constraints:
1 â‰¤ |A|, |B| â‰¤ 106

CODE:      */
class Solution {
    String addBinary(String A, String B) {
        if(B.length() > A.length()) {
            String temp = A;
            A = B;
            B = temp;
        }
        
        int i = A.length()-1;
        int j = B.length()-1;
        int carry = 0;
        
        StringBuilder res = new StringBuilder();
        
        
        while(i>=0 && j>=0) {
            int sum = A.charAt(i)-'0' + B.charAt(j)-'0' + carry;
            carry = sum/2;
            res.append(sum%2);
            
            i--;
            j--;
        }
        
        while(i>=0) {
            int sum = A.charAt(i)-'0' + carry;
            carry = sum/2;
            res.append(sum%2);
            
            i--;
        }
        
        if(carry != 0) {
            res.append(carry);
        }
        
        int start = res.length()-1;
        
        while(start >=0 && res.charAt(start) == '0') {
            start--;
        }
        
        if(start != res.length()-1) {
            res.delete(start+1,res.length());
        }
        
        return res.reverse().toString();
        
    }
}
